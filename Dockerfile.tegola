# --- Build the binary
FROM golang:1.11.0-alpine3.8 AS build

# Only needed for CGO support at time of build, results in no noticable change in binary size
# incurs approximately 1:30 extra build time (1:54 vs 0:27) to install packages.  Doesn't impact
# development as these layers are drawn from cache after the first build.
RUN apk update \ 
	&& apk add git musl-dev=1.1.19-r10 \
	&& apk add gcc=6.4.0-r9

# Set up source for compilation
RUN mkdir -p /go/src/github.com/go-spatial/tegola
RUN cd /go/src/github.com/go-spatial \
    && git clone https://github.com/go-spatial/tegola \
    && cd tegola \
    && git checkout -q v0.9.0

# Build binary
RUN cd /go/src/github.com/go-spatial/tegola/cmd/tegola \
	&& go build -v -gcflags "-N -l" -o /opt/tegola \ 
	&& chmod a+x /opt/tegola

# --- Create minimal deployment image, just alpine & the binary
FROM alpine:3.7
LABEL io.gospatial.version="v0.9.0"
RUN apk update && apk add postgresql-client
COPY --from=build /opt/tegola /opt/
RUN mkdir -p /opt/tegola_config/
COPY config.toml /opt/tegola_config/
COPY ./wait-for-postgres.sh /opt/wait-for-postgres.sh
RUN chmod +x /opt/wait-for-postgres.sh
EXPOSE 8080
CMD ["/opt/tegola", "--config", "/opt/tegola_config/config.toml", "serve"]
